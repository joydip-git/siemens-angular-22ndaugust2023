angular:
	JS Framework
	SPA
	client-side fornt-end framework
	web application, mobile application, headless browser application

Language: TypeScript

JavaScript
TypeScript
Node JS
general web development
	- tools
	- transpiler
	- bundler tool (webpack)
	- app dev server


JS engine:
	v8 - chrome
	firefox - spidermonkey
	safari - JSCore	

Node JS- 2009 Ryan Dahl
Deno


JS execution environment:
	- browser
	- node js (server side framework)


JS execution-
	a. preparation stage
	b. execution stage

JS hoisting
	- variable declarations
	- function declarations (NOT expressions)

ECMA:
	ECMAScript
	ES5<2015-ES6>ES6+
	a. templated string (string template)
	b. let and const keyword
	c. class, constructor, extends, super
	d. spread operator (object and array)
	e. object destructuring (object and array)
	f. rest operator
	g. arrow function: the function will be bound to the same "this" object as that of the immediate outer scope

Closure: maintaining state (state of all local variables and functions) of all outer scopes for any function


person function => prototype object
						- constructor (reference to person function itself)
						- proto


how to create JS objects:
	a. object literal syntax:
	var anilObject = { prop1:value1, funcProp1:function(){}}

	b. constructor function
	function person(name,id,salary){
		this.personName= name
		..................
		this.print = function(){}
	}


	function person(name,id,salary){
		this.personName= name
		..................
	}
	person.prototype.print = function(){}

	c. new class/constructor keyword of ES6 (2015):
	class Person{
		constructor(name,id,salary){
			this.personName= name
			..................
		}
		print(){}
	}


module: an API to expose members of one file to another

module formats:
a. common js format
module.exports={prop1:member1,....}
const {prop1}=  require('....')

b. ES6 module format
c. AMD ( asynchronous module definition) format
d. UMD (Universal module definition) format

module loader:
requirejs
systemjs



Node JS: C:\Program Files\nodejs
3rd Party tools(s/w) installed using NPM (node package manager) globally
C:\Users\joydip\AppData\Roaming\npm
>npm install <package-name> --global

other package managers: yarn, bower etc.


{prop-name:value, prop-name:function(){}}

var x= 10
[{"x":10},{}]

command to create package.json file
>npm init
or
>npm init --yes

install development dependency for application:
>npm i <package-name> -D
or
>npm i <package-name> --save-dev (old)

install complete dependency for application:
>npm i <package-name>
or
>npm i <package-name> --save (old)


command to create tsconfig.json file:(use tsc)
>.\node_modules\.bin\tsc --init









	
	