Angular:
	client-side UI framework
	SPA
	Declarrative programming
	

Features:
	data binding
	Piping
	client-side routing
	services
	directives
	angular modules

assets:
	component		class		Component()       @Component
													export class XComponent{} x.component.ts/html/css

	directive		class		Directive()		@Directive
													export class XDirective{} x.directive.ts

	pipe			class							@Pipe
													export class XPipe{}		 x.pipe.ts

	service			class							@Injectable()
													expotr class XService{}	 x.service.ts

	module			class							@NgModule
													expotr class XModule{}	x.module.ts
	


data binding:
	passing data from view to code and vice versa of a component

1. passing data from code to view
	a. interpolation {{<data-member/property/model-data>}}
	b. property binding: <html-element [attribute-name]="class-prop-name">
2. passing data from view to code
	event binding



data		element
title	=>	h2
title	<=>	input


directives:
	custom attributes to extend the behavior for different purpose of existing elements
	a. structural: is used for DOM manipulation. 
	syntax: *ngX
	ex: NgIf, NgForOf, NgSwitch, NgIfElse
	module: @angular/common => CommonModule

	@Directive({selector:"[ngFor]"})
	export class NgForOfDirective{
		func(template, expr){
		}
	}

	@NgModule({
		declarations:[ NgForOfDirective]
	})
	export class CommonModule{}


	@NgModule({
		declarations:[],
		imports:[CommonModule],
		exports:[CommonModule]
	})
	export class BrowserModule{}

	b. attribute directive: just extend the behavior of the element
	syntax: ngX
	ex: ngModel, ngForm (@angular/forms => FormsModule), 
	formControl, formGroup, formControlName, formGroupName(@angular/forms => ReactiveFormsModule)

	c. component directive


Service: 
a. create service
b. register service (3 types of Injector)
		i.   asset level
		ii.  feature module level
		iii. root module level
c. consume service


Angular forms:
	a. template-driven form
		everything is controlled from the template using ngForm, ngModel etc. directives
		directive classes: NgForm, NgModel (@angular/forms => FormsModule)
		types: FormGroup, FormControl etc.

	b. reactive form:
		everything is controlled from the code using fromControl, formGroup etc. directives
		directives: formControl, formControlName, fromGroup, fornGroupName (@angular/forms =>ReactiveFormsModule)
		types: FormGroup, FormControl etc.

	errors:{ required:true}
			{minlength:{actualLength:, requiredLength:}}

	interface ValidationErrors{
		[key:string]:any;
	}

	function customValidate(control:AbstractControl):ErrorResponse|null{
	}
		












	